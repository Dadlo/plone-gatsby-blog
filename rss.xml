<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Plone Gatsby Blog]]></title><description><![CDATA[Blog made with Plone + Gatsby]]></description><link>https://dadlo.github.io/plone-gatsby-blog</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 15 Oct 2019 20:52:05 GMT</lastBuildDate><item><title><![CDATA[Javascript: Types]]></title><description><![CDATA[Types in Javascript]]></description><link>https://dadlo.github.io/plone-gatsby-blog/news/javascript-types/</link><guid isPermaLink="false">https://dadlo.github.io/plone-gatsby-blog/news/javascript-types/</guid><pubDate>Tue, 15 Oct 2019 20:21:46 GMT</pubDate><content:encoded>[{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;There are only 6 defined types in JavaScript&quot;]}},{&quot;type&quot;:&quot;ul&quot;,&quot;props&quot;:{&quot;children&quot;:[{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;boolean&quot;]}},{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;number&quot;]}},{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;string&quot;]}},{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;null&quot;]}},{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;undefined&quot;]}},{&quot;type&quot;:&quot;li&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;object&quot;]}}]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Arrays are just Objects and not a type.&quot;]}}]</content:encoded></item><item><title><![CDATA[Javascript: Closure]]></title><description><![CDATA[Closures]]></description><link>https://dadlo.github.io/plone-gatsby-blog/news/javascript-closure/</link><guid isPermaLink="false">https://dadlo.github.io/plone-gatsby-blog/news/javascript-closure/</guid><pubDate>Tue, 15 Oct 2019 20:20:46 GMT</pubDate><content:encoded>[{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;\&quot;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment)\&quot;.&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;Source: https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;A closure it nothing more than a function with access to the variables from another function&apos;s scope.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;That is done by creating a function inside another one.&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;The inner function has access to the outer one scope.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Even after the outer function is called, the outer scope will not be destroyed if the inner is referenced.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;This way, that scope is accessible only, by the inner function, crearing data protection.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;All changes to the outer scope variables will persist and be shown on each subsequent call.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Highlights:&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Closure are inner functions inside outer functions with access to the outer scope;&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- The outer scope is not destroyed while the reference for the inner function exists;&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- The outer scope variables changes will persist to subsequent call.&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Why is it important?&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- To store private data (not only a private convention like the underscore suffix)&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- To build iterators&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- To implement Singleton (single instance of an object while execution of the problem) -&gt; Just have a nameless outer function in order not to be called directly.&quot;]}}]</content:encoded></item><item><title><![CDATA[JavaScript: Prototype VS Classes]]></title><description><![CDATA[JavaScript: Prototype VS Classes]]></description><link>https://dadlo.github.io/plone-gatsby-blog/news/javascript-prototype-vs-classes/</link><guid isPermaLink="false">https://dadlo.github.io/plone-gatsby-blog/news/javascript-prototype-vs-classes/</guid><pubDate>Tue, 15 Oct 2019 20:19:59 GMT</pubDate><content:encoded>[{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Source: https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Object / Prototype&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Constructor-like function&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Use of New to add instance of the prototype=&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Objects inherit from other objects&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- The custom one inherit from higher generic Object&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Has __proto__ object with function&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Created Instances are REFERENCES to the Prototype - changing the __proto__ of an object, changes the class and all objects&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Class&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;ES6 Classes are &apos;syntactital sugar&apos; for Prototypes&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- Has extends, constructor, super, static classes&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- But still uses __proto__ unerneath the hood and is based on references&quot;,{&quot;type&quot;:&quot;br&quot;,&quot;props&quot;:{&quot;children&quot;:null}},&quot;- A Class is of type function&quot;]}}]</content:encoded></item><item><title><![CDATA[Plone Conf 2019 - Short Talk From Danilo]]></title><description><![CDATA[Details from the Short Talk from Danilo Sartorelli Barbato on Plone Conf 2019]]></description><link>https://dadlo.github.io/plone-gatsby-blog/news/plone-conf-2019-short-talk/</link><guid isPermaLink="false">https://dadlo.github.io/plone-gatsby-blog/news/plone-conf-2019-short-talk/</guid><pubDate>Tue, 15 Oct 2019 19:48:43 GMT</pubDate><content:encoded>[{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Details from the Short Talk from Danilo Sartorelli Barbato on Plone Conf 2019&quot;]}},{&quot;type&quot;:&quot;p&quot;,&quot;props&quot;:{&quot;children&quot;:[&quot;Download the slides &quot;,{&quot;type&quot;:&quot;Link&quot;,&quot;props&quot;:{&quot;target&quot;:&quot;_blank&quot;,&quot;title&quot;:&quot;Slides Danilo Gatsby Plone Short Talk&quot;,&quot;href&quot;:null,&quot;rel&quot;:&quot;noopener&quot;,&quot;to&quot;:&quot;/news/gatsby-plone.pdf/&quot;,&quot;children&quot;:[&quot;here&quot;]}}]}}]</content:encoded></item></channel></rss>